/*
 * generated by Xtext 2.9.1
 */
package co.edu.uniandes.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class GramaticajmeterGrammarAccess extends AbstractGrammarElementFinder {
	
	public class JMeterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "co.edu.uniandes.Gramaticajmeter.JMeter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cArchitectureResultsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cArchitectureResultsArchitectureResultsParserRuleCall_0_0 = (RuleCall)cArchitectureResultsAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final RuleCall cNLTerminalRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Assignment cArchitectureResultsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cArchitectureResultsArchitectureResultsParserRuleCall_1_1_0 = (RuleCall)cArchitectureResultsAssignment_1_1.eContents().get(0);
		private final RuleCall cNLTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//JMeter:
		//	architectureResults+=ArchitectureResults (NL architectureResults+=ArchitectureResults)* NL?;
		@Override public ParserRule getRule() { return rule; }
		
		//architectureResults+=ArchitectureResults (NL architectureResults+=ArchitectureResults)* NL?
		public Group getGroup() { return cGroup; }
		
		//architectureResults+=ArchitectureResults
		public Assignment getArchitectureResultsAssignment_0() { return cArchitectureResultsAssignment_0; }
		
		//ArchitectureResults
		public RuleCall getArchitectureResultsArchitectureResultsParserRuleCall_0_0() { return cArchitectureResultsArchitectureResultsParserRuleCall_0_0; }
		
		//(NL architectureResults+=ArchitectureResults)*
		public Group getGroup_1() { return cGroup_1; }
		
		//NL
		public RuleCall getNLTerminalRuleCall_1_0() { return cNLTerminalRuleCall_1_0; }
		
		//architectureResults+=ArchitectureResults
		public Assignment getArchitectureResultsAssignment_1_1() { return cArchitectureResultsAssignment_1_1; }
		
		//ArchitectureResults
		public RuleCall getArchitectureResultsArchitectureResultsParserRuleCall_1_1_0() { return cArchitectureResultsArchitectureResultsParserRuleCall_1_1_0; }
		
		//NL?
		public RuleCall getNLTerminalRuleCall_2() { return cNLTerminalRuleCall_2; }
	}
	public class ArchitectureResultsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "co.edu.uniandes.Gramaticajmeter.ArchitectureResults");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cArchitectureKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cArchitectureAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cArchitectureSTRINGTerminalRuleCall_1_0 = (RuleCall)cArchitectureAssignment_1.eContents().get(0);
		private final RuleCall cNLTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Assignment cHeaderAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cHeaderHeaderParserRuleCall_3_0 = (RuleCall)cHeaderAssignment_3.eContents().get(0);
		private final RuleCall cNLTerminalRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		private final Assignment cResultsAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cResultsResultsParserRuleCall_5_0 = (RuleCall)cResultsAssignment_5.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final RuleCall cNLTerminalRuleCall_6_0 = (RuleCall)cGroup_6.eContents().get(0);
		private final Assignment cResultsAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cResultsResultsParserRuleCall_6_1_0 = (RuleCall)cResultsAssignment_6_1.eContents().get(0);
		private final RuleCall cNLTerminalRuleCall_7 = (RuleCall)cGroup.eContents().get(7);
		private final Assignment cHeaderJMeterAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cHeaderJMeterHeaderJMeterParserRuleCall_8_0 = (RuleCall)cHeaderJMeterAssignment_8.eContents().get(0);
		private final RuleCall cNLTerminalRuleCall_9 = (RuleCall)cGroup.eContents().get(9);
		private final Assignment cResultsJMeterAssignment_10 = (Assignment)cGroup.eContents().get(10);
		private final RuleCall cResultsJMeterResultsParserRuleCall_10_0 = (RuleCall)cResultsJMeterAssignment_10.eContents().get(0);
		private final Group cGroup_11 = (Group)cGroup.eContents().get(11);
		private final RuleCall cNLTerminalRuleCall_11_0 = (RuleCall)cGroup_11.eContents().get(0);
		private final Assignment cResultsJMeterAssignment_11_1 = (Assignment)cGroup_11.eContents().get(1);
		private final RuleCall cResultsJMeterResultsParserRuleCall_11_1_0 = (RuleCall)cResultsJMeterAssignment_11_1.eContents().get(0);
		
		//ArchitectureResults:
		//	'architecture=' architecture=STRING NL
		//	header=Header NL
		//	results+=Results (NL results+=Results)* NL
		//	headerJMeter=HeaderJMeter NL
		//	resultsJMeter+=Results (NL resultsJMeter+=Results)*;
		@Override public ParserRule getRule() { return rule; }
		
		//'architecture=' architecture=STRING NL header=Header NL results+=Results (NL results+=Results)* NL
		//headerJMeter=HeaderJMeter NL resultsJMeter+=Results (NL resultsJMeter+=Results)*
		public Group getGroup() { return cGroup; }
		
		//'architecture='
		public Keyword getArchitectureKeyword_0() { return cArchitectureKeyword_0; }
		
		//architecture=STRING
		public Assignment getArchitectureAssignment_1() { return cArchitectureAssignment_1; }
		
		//STRING
		public RuleCall getArchitectureSTRINGTerminalRuleCall_1_0() { return cArchitectureSTRINGTerminalRuleCall_1_0; }
		
		//NL
		public RuleCall getNLTerminalRuleCall_2() { return cNLTerminalRuleCall_2; }
		
		//header=Header
		public Assignment getHeaderAssignment_3() { return cHeaderAssignment_3; }
		
		//Header
		public RuleCall getHeaderHeaderParserRuleCall_3_0() { return cHeaderHeaderParserRuleCall_3_0; }
		
		//NL
		public RuleCall getNLTerminalRuleCall_4() { return cNLTerminalRuleCall_4; }
		
		//results+=Results
		public Assignment getResultsAssignment_5() { return cResultsAssignment_5; }
		
		//Results
		public RuleCall getResultsResultsParserRuleCall_5_0() { return cResultsResultsParserRuleCall_5_0; }
		
		//(NL results+=Results)*
		public Group getGroup_6() { return cGroup_6; }
		
		//NL
		public RuleCall getNLTerminalRuleCall_6_0() { return cNLTerminalRuleCall_6_0; }
		
		//results+=Results
		public Assignment getResultsAssignment_6_1() { return cResultsAssignment_6_1; }
		
		//Results
		public RuleCall getResultsResultsParserRuleCall_6_1_0() { return cResultsResultsParserRuleCall_6_1_0; }
		
		//NL
		public RuleCall getNLTerminalRuleCall_7() { return cNLTerminalRuleCall_7; }
		
		//headerJMeter=HeaderJMeter
		public Assignment getHeaderJMeterAssignment_8() { return cHeaderJMeterAssignment_8; }
		
		//HeaderJMeter
		public RuleCall getHeaderJMeterHeaderJMeterParserRuleCall_8_0() { return cHeaderJMeterHeaderJMeterParserRuleCall_8_0; }
		
		//NL
		public RuleCall getNLTerminalRuleCall_9() { return cNLTerminalRuleCall_9; }
		
		//resultsJMeter+=Results
		public Assignment getResultsJMeterAssignment_10() { return cResultsJMeterAssignment_10; }
		
		//Results
		public RuleCall getResultsJMeterResultsParserRuleCall_10_0() { return cResultsJMeterResultsParserRuleCall_10_0; }
		
		//(NL resultsJMeter+=Results)*
		public Group getGroup_11() { return cGroup_11; }
		
		//NL
		public RuleCall getNLTerminalRuleCall_11_0() { return cNLTerminalRuleCall_11_0; }
		
		//resultsJMeter+=Results
		public Assignment getResultsJMeterAssignment_11_1() { return cResultsJMeterAssignment_11_1; }
		
		//Results
		public RuleCall getResultsJMeterResultsParserRuleCall_11_1_0() { return cResultsJMeterResultsParserRuleCall_11_1_0; }
	}
	public class HeaderElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "co.edu.uniandes.Gramaticajmeter.Header");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cHeaderAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cHeaderColumnHeaderParserRuleCall_0_0 = (RuleCall)cHeaderAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final RuleCall cCOMMATerminalRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Assignment cHeaderAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cHeaderColumnHeaderParserRuleCall_1_1_0 = (RuleCall)cHeaderAssignment_1_1.eContents().get(0);
		
		//Header:
		//	header+=ColumnHeader (COMMA header+=ColumnHeader)*;
		@Override public ParserRule getRule() { return rule; }
		
		//header+=ColumnHeader (COMMA header+=ColumnHeader)*
		public Group getGroup() { return cGroup; }
		
		//header+=ColumnHeader
		public Assignment getHeaderAssignment_0() { return cHeaderAssignment_0; }
		
		//ColumnHeader
		public RuleCall getHeaderColumnHeaderParserRuleCall_0_0() { return cHeaderColumnHeaderParserRuleCall_0_0; }
		
		//(COMMA header+=ColumnHeader)*
		public Group getGroup_1() { return cGroup_1; }
		
		//COMMA
		public RuleCall getCOMMATerminalRuleCall_1_0() { return cCOMMATerminalRuleCall_1_0; }
		
		//header+=ColumnHeader
		public Assignment getHeaderAssignment_1_1() { return cHeaderAssignment_1_1; }
		
		//ColumnHeader
		public RuleCall getHeaderColumnHeaderParserRuleCall_1_1_0() { return cHeaderColumnHeaderParserRuleCall_1_1_0; }
	}
	public class ResultsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "co.edu.uniandes.Gramaticajmeter.Results");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cResultAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cResultResultParserRuleCall_0_0 = (RuleCall)cResultAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final RuleCall cCOMMATerminalRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Assignment cResultAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cResultResultParserRuleCall_1_1_0 = (RuleCall)cResultAssignment_1_1.eContents().get(0);
		
		//Results:
		//	result+=Result (COMMA result+=Result)*;
		@Override public ParserRule getRule() { return rule; }
		
		//result+=Result (COMMA result+=Result)*
		public Group getGroup() { return cGroup; }
		
		//result+=Result
		public Assignment getResultAssignment_0() { return cResultAssignment_0; }
		
		//Result
		public RuleCall getResultResultParserRuleCall_0_0() { return cResultResultParserRuleCall_0_0; }
		
		//(COMMA result+=Result)*
		public Group getGroup_1() { return cGroup_1; }
		
		//COMMA
		public RuleCall getCOMMATerminalRuleCall_1_0() { return cCOMMATerminalRuleCall_1_0; }
		
		//result+=Result
		public Assignment getResultAssignment_1_1() { return cResultAssignment_1_1; }
		
		//Result
		public RuleCall getResultResultParserRuleCall_1_1_0() { return cResultResultParserRuleCall_1_1_0; }
	}
	public class ColumnHeaderElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "co.edu.uniandes.Gramaticajmeter.ColumnHeader");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cStimulusKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cMinresponsetimeKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cMaxresponsetimeKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cAveragetimeKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cErrorcountKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cTotalreqKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		private final Keyword cThreadsKeyword_6 = (Keyword)cAlternatives.eContents().get(6);
		private final Keyword cAveragelatencyKeyword_7 = (Keyword)cAlternatives.eContents().get(7);
		private final Keyword cMinlatencyKeyword_8 = (Keyword)cAlternatives.eContents().get(8);
		private final Keyword cMaxlatencyKeyword_9 = (Keyword)cAlternatives.eContents().get(9);
		private final Keyword cPercentageerrorKeyword_10 = (Keyword)cAlternatives.eContents().get(10);
		private final Keyword cThroughputKeyword_11 = (Keyword)cAlternatives.eContents().get(11);
		
		//ColumnHeader:
		//	'stimulus' | 'minresponsetime' | 'maxresponsetime' | 'averagetime' | 'errorcount' | 'totalreq' | 'threads' |
		//	'averagelatency' | 'minlatency' | 'maxlatency' | 'percentageerror' | 'throughput';
		@Override public ParserRule getRule() { return rule; }
		
		//'stimulus' | 'minresponsetime' | 'maxresponsetime' | 'averagetime' | 'errorcount' | 'totalreq' | 'threads' |
		//'averagelatency' | 'minlatency' | 'maxlatency' | 'percentageerror' | 'throughput'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'stimulus'
		public Keyword getStimulusKeyword_0() { return cStimulusKeyword_0; }
		
		//'minresponsetime'
		public Keyword getMinresponsetimeKeyword_1() { return cMinresponsetimeKeyword_1; }
		
		//'maxresponsetime'
		public Keyword getMaxresponsetimeKeyword_2() { return cMaxresponsetimeKeyword_2; }
		
		//'averagetime'
		public Keyword getAveragetimeKeyword_3() { return cAveragetimeKeyword_3; }
		
		//'errorcount'
		public Keyword getErrorcountKeyword_4() { return cErrorcountKeyword_4; }
		
		//'totalreq'
		public Keyword getTotalreqKeyword_5() { return cTotalreqKeyword_5; }
		
		//'threads'
		public Keyword getThreadsKeyword_6() { return cThreadsKeyword_6; }
		
		//'averagelatency'
		public Keyword getAveragelatencyKeyword_7() { return cAveragelatencyKeyword_7; }
		
		//'minlatency'
		public Keyword getMinlatencyKeyword_8() { return cMinlatencyKeyword_8; }
		
		//'maxlatency'
		public Keyword getMaxlatencyKeyword_9() { return cMaxlatencyKeyword_9; }
		
		//'percentageerror'
		public Keyword getPercentageerrorKeyword_10() { return cPercentageerrorKeyword_10; }
		
		//'throughput'
		public Keyword getThroughputKeyword_11() { return cThroughputKeyword_11; }
	}
	public class ResultElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "co.edu.uniandes.Gramaticajmeter.Result");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueSTRINGTerminalRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//Result:
		//	value=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//value=STRING
		public Assignment getValueAssignment() { return cValueAssignment; }
		
		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_0() { return cValueSTRINGTerminalRuleCall_0; }
	}
	public class HeaderJMeterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "co.edu.uniandes.Gramaticajmeter.HeaderJMeter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cHeaderAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cHeaderColumnHeaderJMeterParserRuleCall_0_0 = (RuleCall)cHeaderAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final RuleCall cCOMMATerminalRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Assignment cHeaderAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cHeaderColumnHeaderJMeterParserRuleCall_1_1_0 = (RuleCall)cHeaderAssignment_1_1.eContents().get(0);
		
		//HeaderJMeter:
		//	header+=ColumnHeaderJMeter (COMMA header+=ColumnHeaderJMeter)*;
		@Override public ParserRule getRule() { return rule; }
		
		//header+=ColumnHeaderJMeter (COMMA header+=ColumnHeaderJMeter)*
		public Group getGroup() { return cGroup; }
		
		//header+=ColumnHeaderJMeter
		public Assignment getHeaderAssignment_0() { return cHeaderAssignment_0; }
		
		//ColumnHeaderJMeter
		public RuleCall getHeaderColumnHeaderJMeterParserRuleCall_0_0() { return cHeaderColumnHeaderJMeterParserRuleCall_0_0; }
		
		//(COMMA header+=ColumnHeaderJMeter)*
		public Group getGroup_1() { return cGroup_1; }
		
		//COMMA
		public RuleCall getCOMMATerminalRuleCall_1_0() { return cCOMMATerminalRuleCall_1_0; }
		
		//header+=ColumnHeaderJMeter
		public Assignment getHeaderAssignment_1_1() { return cHeaderAssignment_1_1; }
		
		//ColumnHeaderJMeter
		public RuleCall getHeaderColumnHeaderJMeterParserRuleCall_1_1_0() { return cHeaderColumnHeaderJMeterParserRuleCall_1_1_0; }
	}
	public class ColumnHeaderJMeterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "co.edu.uniandes.Gramaticajmeter.ColumnHeaderJMeter");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cTimeStampKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cElapsedKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cLabelKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cResponseCodeKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cResponseMessageKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cThreadNameKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		private final Keyword cDataTypeKeyword_6 = (Keyword)cAlternatives.eContents().get(6);
		private final Keyword cSuccessKeyword_7 = (Keyword)cAlternatives.eContents().get(7);
		private final Keyword cBytesKeyword_8 = (Keyword)cAlternatives.eContents().get(8);
		private final Keyword cGrpThreadsKeyword_9 = (Keyword)cAlternatives.eContents().get(9);
		private final Keyword cAllThreadsKeyword_10 = (Keyword)cAlternatives.eContents().get(10);
		private final Keyword cLatencyKeyword_11 = (Keyword)cAlternatives.eContents().get(11);
		
		//ColumnHeaderJMeter:
		//	'timeStamp' | 'elapsed' | 'label' | 'responseCode' | 'responseMessage' | 'threadName' | 'dataType' | 'success' |
		//	'bytes' | 'grpThreads' | 'allThreads' | 'Latency';
		@Override public ParserRule getRule() { return rule; }
		
		//'timeStamp' | 'elapsed' | 'label' | 'responseCode' | 'responseMessage' | 'threadName' | 'dataType' | 'success' | 'bytes'
		//| 'grpThreads' | 'allThreads' | 'Latency'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'timeStamp'
		public Keyword getTimeStampKeyword_0() { return cTimeStampKeyword_0; }
		
		//'elapsed'
		public Keyword getElapsedKeyword_1() { return cElapsedKeyword_1; }
		
		//'label'
		public Keyword getLabelKeyword_2() { return cLabelKeyword_2; }
		
		//'responseCode'
		public Keyword getResponseCodeKeyword_3() { return cResponseCodeKeyword_3; }
		
		//'responseMessage'
		public Keyword getResponseMessageKeyword_4() { return cResponseMessageKeyword_4; }
		
		//'threadName'
		public Keyword getThreadNameKeyword_5() { return cThreadNameKeyword_5; }
		
		//'dataType'
		public Keyword getDataTypeKeyword_6() { return cDataTypeKeyword_6; }
		
		//'success'
		public Keyword getSuccessKeyword_7() { return cSuccessKeyword_7; }
		
		//'bytes'
		public Keyword getBytesKeyword_8() { return cBytesKeyword_8; }
		
		//'grpThreads'
		public Keyword getGrpThreadsKeyword_9() { return cGrpThreadsKeyword_9; }
		
		//'allThreads'
		public Keyword getAllThreadsKeyword_10() { return cAllThreadsKeyword_10; }
		
		//'Latency'
		public Keyword getLatencyKeyword_11() { return cLatencyKeyword_11; }
	}
	
	
	private final JMeterElements pJMeter;
	private final ArchitectureResultsElements pArchitectureResults;
	private final HeaderElements pHeader;
	private final ResultsElements pResults;
	private final ColumnHeaderElements pColumnHeader;
	private final ResultElements pResult;
	private final HeaderJMeterElements pHeaderJMeter;
	private final ColumnHeaderJMeterElements pColumnHeaderJMeter;
	private final TerminalRule tCOMMA;
	private final TerminalRule tNL;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public GramaticajmeterGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pJMeter = new JMeterElements();
		this.pArchitectureResults = new ArchitectureResultsElements();
		this.pHeader = new HeaderElements();
		this.pResults = new ResultsElements();
		this.pColumnHeader = new ColumnHeaderElements();
		this.pResult = new ResultElements();
		this.pHeaderJMeter = new HeaderJMeterElements();
		this.pColumnHeaderJMeter = new ColumnHeaderJMeterElements();
		this.tCOMMA = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "co.edu.uniandes.Gramaticajmeter.COMMA");
		this.tNL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "co.edu.uniandes.Gramaticajmeter.NL");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("co.edu.uniandes.Gramaticajmeter".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//JMeter:
	//	architectureResults+=ArchitectureResults (NL architectureResults+=ArchitectureResults)* NL?;
	public JMeterElements getJMeterAccess() {
		return pJMeter;
	}
	
	public ParserRule getJMeterRule() {
		return getJMeterAccess().getRule();
	}
	
	//ArchitectureResults:
	//	'architecture=' architecture=STRING NL
	//	header=Header NL
	//	results+=Results (NL results+=Results)* NL
	//	headerJMeter=HeaderJMeter NL
	//	resultsJMeter+=Results (NL resultsJMeter+=Results)*;
	public ArchitectureResultsElements getArchitectureResultsAccess() {
		return pArchitectureResults;
	}
	
	public ParserRule getArchitectureResultsRule() {
		return getArchitectureResultsAccess().getRule();
	}
	
	//Header:
	//	header+=ColumnHeader (COMMA header+=ColumnHeader)*;
	public HeaderElements getHeaderAccess() {
		return pHeader;
	}
	
	public ParserRule getHeaderRule() {
		return getHeaderAccess().getRule();
	}
	
	//Results:
	//	result+=Result (COMMA result+=Result)*;
	public ResultsElements getResultsAccess() {
		return pResults;
	}
	
	public ParserRule getResultsRule() {
		return getResultsAccess().getRule();
	}
	
	//ColumnHeader:
	//	'stimulus' | 'minresponsetime' | 'maxresponsetime' | 'averagetime' | 'errorcount' | 'totalreq' | 'threads' |
	//	'averagelatency' | 'minlatency' | 'maxlatency' | 'percentageerror' | 'throughput';
	public ColumnHeaderElements getColumnHeaderAccess() {
		return pColumnHeader;
	}
	
	public ParserRule getColumnHeaderRule() {
		return getColumnHeaderAccess().getRule();
	}
	
	//Result:
	//	value=STRING;
	public ResultElements getResultAccess() {
		return pResult;
	}
	
	public ParserRule getResultRule() {
		return getResultAccess().getRule();
	}
	
	//HeaderJMeter:
	//	header+=ColumnHeaderJMeter (COMMA header+=ColumnHeaderJMeter)*;
	public HeaderJMeterElements getHeaderJMeterAccess() {
		return pHeaderJMeter;
	}
	
	public ParserRule getHeaderJMeterRule() {
		return getHeaderJMeterAccess().getRule();
	}
	
	//ColumnHeaderJMeter:
	//	'timeStamp' | 'elapsed' | 'label' | 'responseCode' | 'responseMessage' | 'threadName' | 'dataType' | 'success' |
	//	'bytes' | 'grpThreads' | 'allThreads' | 'Latency';
	public ColumnHeaderJMeterElements getColumnHeaderJMeterAccess() {
		return pColumnHeaderJMeter;
	}
	
	public ParserRule getColumnHeaderJMeterRule() {
		return getColumnHeaderJMeterAccess().getRule();
	}
	
	//terminal COMMA:
	//	',';
	public TerminalRule getCOMMARule() {
		return tCOMMA;
	}
	
	//terminal NL:
	//	'\r'? '\n';
	public TerminalRule getNLRule() {
		return tNL;
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' | "'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/ *'->'* /';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
