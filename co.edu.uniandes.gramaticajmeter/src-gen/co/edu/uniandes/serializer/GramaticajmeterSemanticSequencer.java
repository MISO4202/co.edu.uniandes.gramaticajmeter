/*
 * generated by Xtext 2.9.1
 */
package co.edu.uniandes.serializer;

import co.edu.uniandes.gramaticajmeter.ArchitectureResults;
import co.edu.uniandes.gramaticajmeter.GramaticajmeterPackage;
import co.edu.uniandes.gramaticajmeter.Header;
import co.edu.uniandes.gramaticajmeter.HeaderJMeter;
import co.edu.uniandes.gramaticajmeter.JMeter;
import co.edu.uniandes.gramaticajmeter.Result;
import co.edu.uniandes.gramaticajmeter.Results;
import co.edu.uniandes.services.GramaticajmeterGrammarAccess;
import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;

@SuppressWarnings("all")
public class GramaticajmeterSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private GramaticajmeterGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == GramaticajmeterPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case GramaticajmeterPackage.ARCHITECTURE_RESULTS:
				sequence_ArchitectureResults(context, (ArchitectureResults) semanticObject); 
				return; 
			case GramaticajmeterPackage.HEADER:
				sequence_Header(context, (Header) semanticObject); 
				return; 
			case GramaticajmeterPackage.HEADER_JMETER:
				sequence_HeaderJMeter(context, (HeaderJMeter) semanticObject); 
				return; 
			case GramaticajmeterPackage.JMETER:
				sequence_JMeter(context, (JMeter) semanticObject); 
				return; 
			case GramaticajmeterPackage.RESULT:
				sequence_Result(context, (Result) semanticObject); 
				return; 
			case GramaticajmeterPackage.RESULTS:
				sequence_Results(context, (Results) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     ArchitectureResults returns ArchitectureResults
	 *
	 * Constraint:
	 *     (
	 *         architecture=STRING 
	 *         header=Header 
	 *         results+=Results 
	 *         results+=Results* 
	 *         headerJMeter=HeaderJMeter 
	 *         resultsJMeter+=Results 
	 *         resultsJMeter+=Results*
	 *     )
	 */
	protected void sequence_ArchitectureResults(ISerializationContext context, ArchitectureResults semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     HeaderJMeter returns HeaderJMeter
	 *
	 * Constraint:
	 *     (header+=ColumnHeaderJMeter header+=ColumnHeaderJMeter*)
	 */
	protected void sequence_HeaderJMeter(ISerializationContext context, HeaderJMeter semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Header returns Header
	 *
	 * Constraint:
	 *     (header+=ColumnHeader header+=ColumnHeader*)
	 */
	protected void sequence_Header(ISerializationContext context, Header semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     JMeter returns JMeter
	 *
	 * Constraint:
	 *     (architectureResults+=ArchitectureResults architectureResults+=ArchitectureResults*)
	 */
	protected void sequence_JMeter(ISerializationContext context, JMeter semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Result returns Result
	 *
	 * Constraint:
	 *     value=STRING
	 */
	protected void sequence_Result(ISerializationContext context, Result semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GramaticajmeterPackage.Literals.RESULT__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GramaticajmeterPackage.Literals.RESULT__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getResultAccess().getValueSTRINGTerminalRuleCall_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Results returns Results
	 *
	 * Constraint:
	 *     (result+=Result result+=Result*)
	 */
	protected void sequence_Results(ISerializationContext context, Results semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
