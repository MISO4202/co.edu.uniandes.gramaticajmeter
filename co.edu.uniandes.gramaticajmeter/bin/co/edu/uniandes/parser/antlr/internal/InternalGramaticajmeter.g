/*
 * generated by Xtext 2.9.1
 */
grammar InternalGramaticajmeter;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package co.edu.uniandes.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package co.edu.uniandes.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import co.edu.uniandes.services.GramaticajmeterGrammarAccess;

}

@parser::members {

 	private GramaticajmeterGrammarAccess grammarAccess;

    public InternalGramaticajmeterParser(TokenStream input, GramaticajmeterGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "JMeter";
   	}

   	@Override
   	protected GramaticajmeterGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleJMeter
entryRuleJMeter returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getJMeterRule()); }
	iv_ruleJMeter=ruleJMeter
	{ $current=$iv_ruleJMeter.current; }
	EOF;

// Rule JMeter
ruleJMeter returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getJMeterAccess().getArchitectureResultsArchitectureResultsParserRuleCall_0_0());
				}
				lv_architectureResults_0_0=ruleArchitectureResults
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getJMeterRule());
					}
					add(
						$current,
						"architectureResults",
						lv_architectureResults_0_0,
						"co.edu.uniandes.Gramaticajmeter.ArchitectureResults");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			this_NL_1=RULE_NL
			{
				newLeafNode(this_NL_1, grammarAccess.getJMeterAccess().getNLTerminalRuleCall_1_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getJMeterAccess().getArchitectureResultsArchitectureResultsParserRuleCall_1_1_0());
					}
					lv_architectureResults_2_0=ruleArchitectureResults
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getJMeterRule());
						}
						add(
							$current,
							"architectureResults",
							lv_architectureResults_2_0,
							"co.edu.uniandes.Gramaticajmeter.ArchitectureResults");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
		(
			this_NL_3=RULE_NL
			{
				newLeafNode(this_NL_3, grammarAccess.getJMeterAccess().getNLTerminalRuleCall_2());
			}
		)?
	)
;

// Entry rule entryRuleArchitectureResults
entryRuleArchitectureResults returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getArchitectureResultsRule()); }
	iv_ruleArchitectureResults=ruleArchitectureResults
	{ $current=$iv_ruleArchitectureResults.current; }
	EOF;

// Rule ArchitectureResults
ruleArchitectureResults returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='architecture='
		{
			newLeafNode(otherlv_0, grammarAccess.getArchitectureResultsAccess().getArchitectureKeyword_0());
		}
		(
			(
				lv_architecture_1_0=RULE_STRING
				{
					newLeafNode(lv_architecture_1_0, grammarAccess.getArchitectureResultsAccess().getArchitectureSTRINGTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getArchitectureResultsRule());
					}
					setWithLastConsumed(
						$current,
						"architecture",
						lv_architecture_1_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
		this_NL_2=RULE_NL
		{
			newLeafNode(this_NL_2, grammarAccess.getArchitectureResultsAccess().getNLTerminalRuleCall_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getArchitectureResultsAccess().getHeaderHeaderParserRuleCall_3_0());
				}
				lv_header_3_0=ruleHeader
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getArchitectureResultsRule());
					}
					set(
						$current,
						"header",
						lv_header_3_0,
						"co.edu.uniandes.Gramaticajmeter.Header");
					afterParserOrEnumRuleCall();
				}
			)
		)
		this_NL_4=RULE_NL
		{
			newLeafNode(this_NL_4, grammarAccess.getArchitectureResultsAccess().getNLTerminalRuleCall_4());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getArchitectureResultsAccess().getResultsResultsParserRuleCall_5_0());
				}
				lv_results_5_0=ruleResults
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getArchitectureResultsRule());
					}
					add(
						$current,
						"results",
						lv_results_5_0,
						"co.edu.uniandes.Gramaticajmeter.Results");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			this_NL_6=RULE_NL
			{
				newLeafNode(this_NL_6, grammarAccess.getArchitectureResultsAccess().getNLTerminalRuleCall_6_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getArchitectureResultsAccess().getResultsResultsParserRuleCall_6_1_0());
					}
					lv_results_7_0=ruleResults
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getArchitectureResultsRule());
						}
						add(
							$current,
							"results",
							lv_results_7_0,
							"co.edu.uniandes.Gramaticajmeter.Results");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
		this_NL_8=RULE_NL
		{
			newLeafNode(this_NL_8, grammarAccess.getArchitectureResultsAccess().getNLTerminalRuleCall_7());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getArchitectureResultsAccess().getHeaderJMeterHeaderJMeterParserRuleCall_8_0());
				}
				lv_headerJMeter_9_0=ruleHeaderJMeter
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getArchitectureResultsRule());
					}
					set(
						$current,
						"headerJMeter",
						lv_headerJMeter_9_0,
						"co.edu.uniandes.Gramaticajmeter.HeaderJMeter");
					afterParserOrEnumRuleCall();
				}
			)
		)
		this_NL_10=RULE_NL
		{
			newLeafNode(this_NL_10, grammarAccess.getArchitectureResultsAccess().getNLTerminalRuleCall_9());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getArchitectureResultsAccess().getResultsJMeterResultsParserRuleCall_10_0());
				}
				lv_resultsJMeter_11_0=ruleResults
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getArchitectureResultsRule());
					}
					add(
						$current,
						"resultsJMeter",
						lv_resultsJMeter_11_0,
						"co.edu.uniandes.Gramaticajmeter.Results");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			this_NL_12=RULE_NL
			{
				newLeafNode(this_NL_12, grammarAccess.getArchitectureResultsAccess().getNLTerminalRuleCall_11_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getArchitectureResultsAccess().getResultsJMeterResultsParserRuleCall_11_1_0());
					}
					lv_resultsJMeter_13_0=ruleResults
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getArchitectureResultsRule());
						}
						add(
							$current,
							"resultsJMeter",
							lv_resultsJMeter_13_0,
							"co.edu.uniandes.Gramaticajmeter.Results");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleHeader
entryRuleHeader returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getHeaderRule()); }
	iv_ruleHeader=ruleHeader
	{ $current=$iv_ruleHeader.current; }
	EOF;

// Rule Header
ruleHeader returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getHeaderAccess().getHeaderColumnHeaderParserRuleCall_0_0());
				}
				lv_header_0_0=ruleColumnHeader
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getHeaderRule());
					}
					add(
						$current,
						"header",
						lv_header_0_0,
						"co.edu.uniandes.Gramaticajmeter.ColumnHeader");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			this_COMMA_1=RULE_COMMA
			{
				newLeafNode(this_COMMA_1, grammarAccess.getHeaderAccess().getCOMMATerminalRuleCall_1_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getHeaderAccess().getHeaderColumnHeaderParserRuleCall_1_1_0());
					}
					lv_header_2_0=ruleColumnHeader
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getHeaderRule());
						}
						add(
							$current,
							"header",
							lv_header_2_0,
							"co.edu.uniandes.Gramaticajmeter.ColumnHeader");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleResults
entryRuleResults returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getResultsRule()); }
	iv_ruleResults=ruleResults
	{ $current=$iv_ruleResults.current; }
	EOF;

// Rule Results
ruleResults returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getResultsAccess().getResultResultParserRuleCall_0_0());
				}
				lv_result_0_0=ruleResult
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getResultsRule());
					}
					add(
						$current,
						"result",
						lv_result_0_0,
						"co.edu.uniandes.Gramaticajmeter.Result");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			this_COMMA_1=RULE_COMMA
			{
				newLeafNode(this_COMMA_1, grammarAccess.getResultsAccess().getCOMMATerminalRuleCall_1_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getResultsAccess().getResultResultParserRuleCall_1_1_0());
					}
					lv_result_2_0=ruleResult
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getResultsRule());
						}
						add(
							$current,
							"result",
							lv_result_2_0,
							"co.edu.uniandes.Gramaticajmeter.Result");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleColumnHeader
entryRuleColumnHeader returns [String current=null]:
	{ newCompositeNode(grammarAccess.getColumnHeaderRule()); }
	iv_ruleColumnHeader=ruleColumnHeader
	{ $current=$iv_ruleColumnHeader.current.getText(); }
	EOF;

// Rule ColumnHeader
ruleColumnHeader returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='stimulus'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getColumnHeaderAccess().getStimulusKeyword_0());
		}
		    |
		kw='minresponsetime'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getColumnHeaderAccess().getMinresponsetimeKeyword_1());
		}
		    |
		kw='maxresponsetime'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getColumnHeaderAccess().getMaxresponsetimeKeyword_2());
		}
		    |
		kw='averagetime'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getColumnHeaderAccess().getAveragetimeKeyword_3());
		}
		    |
		kw='errorcount'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getColumnHeaderAccess().getErrorcountKeyword_4());
		}
		    |
		kw='totalreq'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getColumnHeaderAccess().getTotalreqKeyword_5());
		}
		    |
		kw='threads'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getColumnHeaderAccess().getThreadsKeyword_6());
		}
		    |
		kw='averagelatency'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getColumnHeaderAccess().getAveragelatencyKeyword_7());
		}
		    |
		kw='minlatency'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getColumnHeaderAccess().getMinlatencyKeyword_8());
		}
		    |
		kw='maxlatency'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getColumnHeaderAccess().getMaxlatencyKeyword_9());
		}
		    |
		kw='percentageerror'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getColumnHeaderAccess().getPercentageerrorKeyword_10());
		}
		    |
		kw='throughput'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getColumnHeaderAccess().getThroughputKeyword_11());
		}
	)
;

// Entry rule entryRuleResult
entryRuleResult returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getResultRule()); }
	iv_ruleResult=ruleResult
	{ $current=$iv_ruleResult.current; }
	EOF;

// Rule Result
ruleResult returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_value_0_0=RULE_STRING
			{
				newLeafNode(lv_value_0_0, grammarAccess.getResultAccess().getValueSTRINGTerminalRuleCall_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getResultRule());
				}
				setWithLastConsumed(
					$current,
					"value",
					lv_value_0_0,
					"org.eclipse.xtext.common.Terminals.STRING");
			}
		)
	)
;

// Entry rule entryRuleHeaderJMeter
entryRuleHeaderJMeter returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getHeaderJMeterRule()); }
	iv_ruleHeaderJMeter=ruleHeaderJMeter
	{ $current=$iv_ruleHeaderJMeter.current; }
	EOF;

// Rule HeaderJMeter
ruleHeaderJMeter returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getHeaderJMeterAccess().getHeaderColumnHeaderJMeterParserRuleCall_0_0());
				}
				lv_header_0_0=ruleColumnHeaderJMeter
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getHeaderJMeterRule());
					}
					add(
						$current,
						"header",
						lv_header_0_0,
						"co.edu.uniandes.Gramaticajmeter.ColumnHeaderJMeter");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			this_COMMA_1=RULE_COMMA
			{
				newLeafNode(this_COMMA_1, grammarAccess.getHeaderJMeterAccess().getCOMMATerminalRuleCall_1_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getHeaderJMeterAccess().getHeaderColumnHeaderJMeterParserRuleCall_1_1_0());
					}
					lv_header_2_0=ruleColumnHeaderJMeter
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getHeaderJMeterRule());
						}
						add(
							$current,
							"header",
							lv_header_2_0,
							"co.edu.uniandes.Gramaticajmeter.ColumnHeaderJMeter");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleColumnHeaderJMeter
entryRuleColumnHeaderJMeter returns [String current=null]:
	{ newCompositeNode(grammarAccess.getColumnHeaderJMeterRule()); }
	iv_ruleColumnHeaderJMeter=ruleColumnHeaderJMeter
	{ $current=$iv_ruleColumnHeaderJMeter.current.getText(); }
	EOF;

// Rule ColumnHeaderJMeter
ruleColumnHeaderJMeter returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='timeStamp'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getColumnHeaderJMeterAccess().getTimeStampKeyword_0());
		}
		    |
		kw='elapsed'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getColumnHeaderJMeterAccess().getElapsedKeyword_1());
		}
		    |
		kw='label'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getColumnHeaderJMeterAccess().getLabelKeyword_2());
		}
		    |
		kw='responseCode'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getColumnHeaderJMeterAccess().getResponseCodeKeyword_3());
		}
		    |
		kw='responseMessage'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getColumnHeaderJMeterAccess().getResponseMessageKeyword_4());
		}
		    |
		kw='threadName'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getColumnHeaderJMeterAccess().getThreadNameKeyword_5());
		}
		    |
		kw='dataType'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getColumnHeaderJMeterAccess().getDataTypeKeyword_6());
		}
		    |
		kw='success'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getColumnHeaderJMeterAccess().getSuccessKeyword_7());
		}
		    |
		kw='bytes'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getColumnHeaderJMeterAccess().getBytesKeyword_8());
		}
		    |
		kw='grpThreads'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getColumnHeaderJMeterAccess().getGrpThreadsKeyword_9());
		}
		    |
		kw='allThreads'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getColumnHeaderJMeterAccess().getAllThreadsKeyword_10());
		}
		    |
		kw='Latency'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getColumnHeaderJMeterAccess().getLatencyKeyword_11());
		}
	)
;

RULE_COMMA : ',';

RULE_NL : '\r'? '\n';

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
